apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "redis.fullname" . }}
  labels:
    {{- include "redis.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "redis.selectorLabels" . | nindent 6 }}
  serviceName: {{ template "redis.fullname" . }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "redis.selectorLabels" . | nindent 8 }}
    spec:
      automountServiceAccountToken: false
      containers:
        - name: "redis"
          args:
            - "redis-server"
            {{- if .Values.persistence.enabled }}
            - "--appendonly"
            - "yes"
            {{- end }}
            {{- if (and .Values.config.secretName .Values.config.secretKey) }}
            - "--requirepass"
            - "$(REDIS_PASSWORD)"
            {{- end }}
          {{- if (and .Values.config.secretName .Values.config.secretKey) }}
          env:
            - name: "REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.config.secretName | quote }}
                  key: {{ .Values.config.secretKey | quote }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          livenessProbe:
            exec:
              command:
                - "sh"
                - "-c"
                - "redis-cli -h $(hostname) incr health:counter"
            initialDelaySeconds: 15
            periodSeconds: 60
          ports:
            - containerPort: 6379
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "all"
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: "storage"
              mountPath: "/data"
      securityContext:
        fsGroup: 999
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
      {{- if (not .Values.persistence.enabled) }}
      volumes:
        - name: "storage"
          emptyDir: {}
      {{- else if .Values.persistence.volumeClaimName }}
      volumes:
        - name: "storage"
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.volumeClaimName | quote }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if (and .Values.persistence.enabled (not .Values.persistence.volumeClaimName)) }}
  volumeClaimTemplates:
    - metadata:
        name: "storage"
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
  {{- end }}
