# Default values for Gafaelfawr.

# -- Number of web frontend pods to start
replicaCount: 1

# -- Override the base name for resources
nameOverride: ""

# -- Override the full name for resources (includes the release name)
fullnameOverride: ""

image:
  # -- Gafaelfawr image to use
  repository: "lsstsqre/gafaelfawr"

  # -- Pull policy for the Gafaelfawr image
  pullPolicy: "IfNotPresent"

  # -- Tag of Gafaelfawr image to use
  # @default -- The appVersion of the chart
  tag: ""

# -- Secret names to use for all Docker pulls
imagePullSecrets: []

serviceAccount:
  # -- Force creation of a service account. Normally, no service account is
  # used or mounted. If CloudSQL is enabled, a service account is always
  # created regardless of this value.
  create: false

  # -- Annotations to add to the service account. If CloudSQL is in use, the
  # annotation specifying the Google service account will also be added.
  annotations: {}

  # -- Name of the service account to use
  # @default -- Name based on the fullname template
  name: ""

ingress:
  # -- Whether to create an ingress
  enabled: true

  # -- Additional annotations to add to the ingress
  annotations: {}

  # -- Hostname for the ingress. This should normally be the same as
  # config.host.
  host: ""

  # -- Configures TLS for the ingress if needed. If multiple ingresses share
  # the same hostname, only one of them needs a TLS configuration.
  tls: []

networkPolicy:
  # -- Whether to restrict access to the Gafaelfawr service. Only enable if
  # the ingress controller namespace is tagged with
  # `gafaelfawr.lsst.io/ingress: "true"`.
  enabled: false

# -- Resource limits and requests for the Gafaelfawr frontend pod
resources: {}

# -- Annotations for the Gafaelfawr frontend pod
podAnnotations: {}

# -- Node selector rules for the Gafaelfawr frontend pod
nodeSelector: {}

# -- Tolerations for the Gafaelfawr frontend pod
tolerations: []

# -- Affinity rules for the Gafaelfawr frontend pod
affinity: {}

# -- Path to the Vault secret (`secret/k8s_operator/<host>/gafaelfawr`, for
# example)
# @default -- None, must be set
vaultSecretsPath: ""

config:
  # -- Used to construct issuers and URLs.
  # @default -- None, must be set
  host: ""

  # -- URL for the PostgreSQL database
  # @default -- None, must be set
  databaseUrl: ""

  # -- Choose from the text form of Python logging levels
  loglevel: "INFO"

  # -- List of netblocks used for internal Kubernetes IP addresses, used to
  # determine the true client IP for logging
  # @default -- [`10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`]
  proxies:
    - "10.0.0.0/8"
    - "172.16.0.0/12"
    - "192.168.0.0/16"

  cilogon:
    # -- CILogon client ID. One and only one of this or config.github.clientId
    # must be set.
    clientId: ""

    # -- Return URL given to CILogon (must match the CILogon configuration)
    # @default -- `/login` at the value of config.host
    redirectUrl: ""

    # -- Whether to use the test instance of CILogon
    test: false

    # -- Additional parameters to add
    loginParams:
      skin: "LSST"

  github:
    # -- GitHub client ID. One and only one of this or config.cilogon.clientId
    # must be set.
    clientId: ""

  issuer:
    # -- Session length and token expiration (in minutes)
    # @default -- `43200` (30 days)
    expMinutes: 43200

    influxdb:
      # -- Whether to issue tokens for InfluxDB. If set to true,
      # `influxdb-secret` must be set in the Gafaelfawr secret.
      enabled: false

      # -- If set, force all InfluxDB tokens to have that username instead of
      # the authenticated identity of the user requesting a token
      username: ""

  oidcServer:
    # -- Whether to support OpenID Connect clients. If set to true,
    # `oidc-server-secrets` must be set in the Gafaelfawr secret.
    enabled: false

  # -- Names and descriptions of all scopes in use. This is used to populate
  # the new token creation page. Only scopes listed here will be options when
  # creating a new token.
  # @default -- See the `values.yaml` file
  knownScopes:
    "admin:token": "Can create and modify tokens for any user"
    "admin:provision": "Can perform privileged user provisioning"
    "exec:admin": "Administrative access to all APIs"
    "exec:notebook": "Use the Notebook Aspect"
    "exec:portal": "Use the Portal Aspect"
    "read:tap": "Execute SELECT queries in the TAP interface on project datasets"
    "user:token": "Can create and modify user tokens"

  # -- Defines a mapping of scopes to groups that provide that scope. Tokens
  # from an OpenID Connect provider such as CILogon that include groups in an
  # `isMemberOf` claim will be granted scopes based on this mapping.
  groupMapping: {}

  # -- Usernames to add as administrators when initializing a new database.
  # Used only if there are no administrators.
  initialAdmins: []

  # -- HTML footer to add to any login error page (inside a <p> tag).
  errorFooter: ""

cloudsql:
  # -- Enable the Cloud SQL Auth Proxy sidecar, used with CloudSQL databases
  # on Google Cloud
  enabled: false

  image:
    # -- Cloud SQL Auth Proxy image to use
    repository: "gcr.io/cloudsql-docker/gce-proxy"

    # -- Cloud SQL Auth Proxy tag to use
    tag: "1.26.0-buster"

    # -- Pull policy for Cloud SQL Auth Proxy images
    pullPolicy: "IfNotPresent"

  # -- Instance connection name for a CloudSQL PostgreSQL instance
  instanceConnectionName: ""

  # -- The Google service account that has an IAM binding to the `gafaelfawr`
  # and `gafaelfawr-tokens` Kubernetes service accounts and has the
  # `cloudsql.client` role
  serviceAccount: ""

tokens:
  serviceAccount:
    # -- Create a Kubernetes service account to use for token management with
    # a cluster role that allows it to list, get, patch, and delete secrets in
    # any namespace. Even if true, it is only created if tokens.secrets is
    # non-empty.
    create: true

    # -- Annotations to add to the service account. If CloudSQL is in use,
    # the annotation specifying the Google service account will also be added.
    annotations: {}

    # -- Name of the service account to use
    # @default -- Formed by appending `-tokens` to the fullname template
    name: ""

  # -- Resource limits and requests for the Gafaelfawr token management pod
  resources: {}

  # -- Annotations for the token management pod
  podAnnotations: {}

  # -- Node selection rules for the token management pod
  nodeSelector: {}

  # -- Tolerations for the token management pod
  tolerations: []

  # -- Affinity rules for the token management pod
  affinity: {}

redis:
  image:
    # -- Redis image to use
    repository: "redis"

    # -- Redis image tag to use
    tag: "6.2.5"

    # -- Pull policy for the Redis image
    pullPolicy: "IfNotPresent"

  persistence:
    # -- Whether to persist Redis storage and thus tokens. Setting this to
    # false will use `emptyDir` and reset all tokens on every restart. Only
    # use this for a test deployment.
    enabled: true

    # -- Amount of persistent storage to request
    size: "1Gi"

    # -- Class of storage to request
    storageClass: ""

    # -- Access mode of storage to request
    accessMode: "ReadWriteOnce"

    # -- Use an existing PVC, not dynamic provisioning. If this is set, the
    # size, storageClass, and accessMode settings are ignored.
    volumeClaimName: ""

  # -- Pod annotations for the Redis pod
  podAnnotations: {}

  # -- Node selection rules for the Redis pod
  nodeSelector: {}

  # -- Tolerations for the Redis pod
  tolerations: []

  # -- Affinity rules for the Redis pod
  affinity: {}
