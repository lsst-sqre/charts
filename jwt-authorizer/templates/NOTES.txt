Authentication and Authorization application

# Protecting services

Services behind the proxy are configured at the ingress level.

The typical annotation for a browser webapp in kubernetes is configured as follows:

```
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/auth-request-redirect: $request_uri
    nginx.ingress.kubernetes.io/auth-response-headers: X-Auth-Request-Token
    nginx.ingress.kubernetes.io/auth-sign-in: https://{{ .Values.host }}/oauth2/sign_in
    nginx.ingress.kubernetes.io/auth-url: https://{{ .Values.host }}/auth?capability={{ .Values.user_capability }}
    nginx.ingress.kubernetes.io/configuration-snippet: |
      error_page 403 = "https://{{ .Values.host }}/oauth2/start?rd=$request_uri";
```

This will redirect to the login page for invalid sessions within a browser.
The token in `X-Auth-Request-Token` header will be signed by the issuer for
this domain.

Tokens will be signed by the token reissuer. The audience in the reissued tokens
is the domain name for most requests.

# Headers from proxy

The following headers are available from the proxy, any of these can be
added to the `nginx.ingress.kubernetes.io/auth-response-headers` annotation
for the ingress rule.

* `X-Auth-Request-Email`: If enabled and email is available, 
  this will be set based on the `email` claim in the token.
* `X-Auth-Request-User`: If enabled and the field is available,
  this will be set from token based on the `JWT_USERNAME_KEY` field,
  which is typically the `uid` claim.
* `X-Auth-Request-Uid`: If enabled and the field is available,
  this will be set from token based on the `JWT_UID_KEY` field,
  which is typically the `uidNumber` claim
* `X-Auth-Request-Groups`: When a token has groups available
  in the `isMemberOf` claim, the names of the groups will be
  returned, comma-separated, in this header.
* `X-Auth-Request-Token`: If enabled, the encoded token will
  be set. If `reissue_token` is true, the token is reissued first
* `X-Auth-Request-Token-Ticket`: When a ticket is available
  for the token, we will return it under this header.
* `X-Auth-Request-Token-Capabilities`: If the token has
  capabilities in the `scope` claim, they will be returned in this
  header.
* `X-Auth-Request-Token-Capabilities-Accepted`: A space-separated 
  list of token capabilities the reliant resource accepts
* `X-Auth-Request-Token-Capabilities-Satisfy`: The strategy
  the reliant resource uses to accept a capability. `any` or `all`
* `WWW-Authenticate`: If the request is unauthenticated, this
  header will be set according to the configuration.

# Verifying tokens
The jwt-authorizer application deploys a JWKS file to https://{{ .Values.host }}/.well-known/jwks.json
Some applications may use that file for verifying a token they receive is valid.
